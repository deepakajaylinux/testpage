# 
msgid ""
msgstr ""
"Project-Id-Version: Read The Docs 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-02-04 11:40+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../builds.rst:2
msgid "Build Process"
msgstr ""

#: ../../builds.rst:4
msgid "Files: `tasks.py`_ - `doc_builder/`_"
msgstr ""

#: ../../builds.rst:10
msgid "How we build documentation"
msgstr ""

#: ../../builds.rst:12
msgid ""
"When we import your documentation, we look at two things first: your "
"*Repository URL* and the *Documentation Type*. We will clone your "
"repository, and then build your documentation using the *Documentation Type*"
" specified."
msgstr ""

#: ../../builds.rst:17
msgid "Sphinx"
msgstr ""

#: ../../builds.rst:19
msgid ""
"When you choose *Sphinx* as your *Documentation Type*, we will first look "
"for a ``conf.py`` file in your repository. If we don't find one, we will "
"generate one for you. We will look inside a ``doc`` or ``docs`` directory "
"first, and then default to the top-level of your documentation."
msgstr ""

#: ../../builds.rst:26
msgid ""
"Then Sphinx will build any files with an ``.rst`` extension. If you have a "
"``README.rst``, it will be transformed into an ``index.rst`` automatically."
msgstr ""

#: ../../builds.rst:31
msgid "Mkdocs"
msgstr ""

#: ../../builds.rst:33
msgid ""
"When you choose *Mkdocs* as your *Documentation Type*, we will first look "
"for a ``mkdocs.yml`` file in your repository. If we don't find one, we will "
"generate one for you. We will look inside a ``doc`` or ``docs`` directory "
"first, and then default to the top-level of your documentation."
msgstr ""

#: ../../builds.rst:40
msgid ""
"Then Sphinx will build any files with an ``.md`` extension. If you have a "
"``README.md``, it will be transformed into an ``index.md`` automatically."
msgstr ""

#: ../../builds.rst:45
msgid "Understanding what's going on"
msgstr ""

#: ../../builds.rst:47
msgid ""
"Understanding how Read the Docs builds your project will help you with "
"debugging the problems you have with the site. It should also allow you to "
"take advantage of certain things that happen during the build process."
msgstr ""

#: ../../builds.rst:49
msgid ""
"The first step of the process is that we check out your code from the "
"repository you have given us. If the code is already checked out, we update "
"the copy to the branch that you have specified in your projects "
"configuration."
msgstr ""

#: ../../builds.rst:51
msgid ""
"Then we build the proper backend code for the type of documentation you've "
"selected."
msgstr ""

#: ../../builds.rst:53
msgid ""
"If you have the *Use Virtualenv* option enabled, we will run ``setup.py "
"install`` on your package, installing it into a virtual environment. You can"
" also define additional packages to install with the *Requirements File* "
"option."
msgstr ""

#: ../../builds.rst:55
msgid ""
"When we build your documentation, we run `sphinx-build -b html . "
"_build/html`, where `html` would be replaced with the correct backend. We "
"also create man pages and pdf's automatically based on your project."
msgstr ""

#: ../../builds.rst:57
msgid ""
"Then these files are copied across to our application servers from the build"
" server. Once on the application servers, they are served from nginx."
msgstr ""

#: ../../builds.rst:59
msgid "An example in code:"
msgstr ""

#: ../../builds.rst:73
msgid "Builder Responsibility"
msgstr ""

#: ../../builds.rst:75
msgid ""
"Builders have a very specific job. They take the updated source code and "
"generate the correct artifacts. The code lives in "
"``self.version.project.checkout_path(self.version.slug)``. The artifacts "
"should end up in "
"``self.version.project.artifact_path(version=self.version.slug, "
"type=self.type)`` Where ``type`` is the name of your builder. All files that"
" end up in the artifact directory should be in their final form."
msgstr ""

#: ../../builds.rst:83
msgid "Packages installed in the build environment"
msgstr ""

#: ../../builds.rst:85
msgid ""
"The build server does have a select number of C libraries installed, because"
" they are used across a wide array of python projects. We can't install "
"every C library out there, but we try and support the major ones. We "
"currently have the following libraries installed:"
msgstr ""

#: ../../builds.rst:87
msgid "Latex (texlive-full)"
msgstr ""

#: ../../builds.rst:88
msgid "libevent (libevent-dev)"
msgstr ""

#: ../../builds.rst:89
msgid "dvipng"
msgstr ""

#: ../../builds.rst:90
msgid "graphviz"
msgstr ""

#: ../../builds.rst:91
msgid "libxslt1.1"
msgstr ""

#: ../../builds.rst:92
msgid "libxml2-dev"
msgstr ""

#: ../../builds.rst:95
msgid "Writing your own builder"
msgstr ""

#: ../../builds.rst:97
msgid ""
"Builds happen on a server using only the RTD Public API. There is no reason "
"that you couldn't build your own independent builder that wrote into the RTD"
" namespace. The only thing that is currently unsupported there is a saner "
"way than uploading the processed files as a zip."
msgstr ""

#: ../../builds.rst:99
msgid ""
"The documentation build system in RTD is made pluggable, so that you can "
"build out your own backend. If you have a documentation format that isn't "
"currently supported, you can add support by contributing a backend."
msgstr ""

#: ../../builds.rst:101
msgid ""
"The :doc:`api/doc_builder` API explains the higher level parts of the API "
"that you need to implement. A basic run goes something like this::"
msgstr ""

#: ../../builds.rst:112
msgid "Deleting a stale or broken build environment"
msgstr ""

#: ../../builds.rst:114
msgid ""
"RTD doesn't expose this in the UI, but it is possible to remove the build "
"directory of your project. If you want to remove a build environment for "
"your project, hit "
"http://readthedocs.org/wipe/<project_slug>/<version_slug>/. You must be "
"logged in to do this."
msgstr ""
